{"version":3,"sources":["components/Header.tsx","components/Search.tsx","components/Movie.tsx","components/MovieList.tsx","reducer/movie.ts","context/movieContext.tsx","components/Main.tsx","hooks/useSearch.ts","hooks/useMovieFetch.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","text","className","Search","React","memo","refetch","handleSearchInputChange","type","onChange","onClick","MovieCard","movie","Title","src","Poster","alt","Year","MovieList","movieState","isLoading","data","map","index","Movie","START_FETCH_MOVIE","SUCCESS_FETCH_MOVIE","FAIL_FETCH_MOVIE","actionCreators","movies","payload","reducer","state","action","undefined","MovieContext","createContext","MovieUpdateContext","MovieContextProvider","children","useReducer","dispatch","Provider","value","Main","query","useState","searchValue","setSearchValue","useCallback","event","target","useSearch","useContext","refetchIndex","setRefetchIndex","prevRefetchIndex","useEffect","a","fetch","then","res","json","catch","fetchData","useMovieFetch","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2a872185.chunk.js","sourcesContent":["import React from 'react'\n\ntype Props = {\n  text: string\n}\n\nconst Header: React.FC<Props> = ({ text }) =>\n  <header className=\"flex flex-col justify-center h-32 text-3xl font-bold bg-red-700 text-red-50\">\n    <h2>{text}</h2>\n  </header>\n\nexport default Header","import React from 'react'\ntype Props = {\n  refetch: () => void;\n  handleSearchInputChange: React.ChangeEventHandler;\n}\n\nconst Search: React.FC<Props> = React.memo(({ refetch, handleSearchInputChange }) =>\n  <div className=\"flex items-end justify-center w-full mb-6 md:justify-start\">\n    <input className=\"w-full px-3 py-1 text-base leading-8 text-gray-700 transition-colors duration-200 ease-in-out bg-gray-100 border-2 border-gray-300 rounded outline-none focus:border-indigo-500\" type=\"text\" onChange={handleSearchInputChange} />\n    <button className=\"inline-flex px-6 py-2 text-lg text-white bg-indigo-500 border-0 rounded focus:outline-none hover:bg-indigo-600\" onClick={refetch}>Search!</button>\n  </div>\n)\n\nexport default Search","import React from 'react'\nimport { Movie } from \"../type/Movie\";\n\ntype Props = {\n  movie: Movie\n}\n\nconst DEFAULT_PLACEHOLDER_IMAGE =\n  \"https://m.media-amazon.com/images/M/MV5BMTczNTI2ODUwOF5BMl5BanBnXkFtZTcwMTU0NTIzMw@@._V1_SX300.jpg\"\n\nconst MovieCard: React.FC<Props> = ({ movie }) =>\n  <div className=\"relative flex flex-col justify-between w-48 p-4 overflow-hidden text-center duration-200 ease-in-out bg-white border-t-2 border-b-2 border-yellow-300 rounded-lg shadow-lg h-80\">\n    <h2 className=\"overflow-hidden text-xl font-bold cursor-pointer overflow-ellipsis whitespace-nowrap\">{movie.Title}</h2>\n    <img\n      className=\"block object-contain max-h-52\"\n      src={movie.Poster === \"N/A\" ? DEFAULT_PLACEHOLDER_IMAGE : movie.Poster}\n      alt={`The movie titled: ${movie.Title}`}\n    />\n    <p>({movie.Year})</p>\n  </div>\n\nexport default MovieCard","import React from 'react'\nimport Movie from './Movie'\nimport { State } from '../reducer/movie'\n\ntype Props = {\n  movieState: State\n}\n\nconst MovieList: React.FC<Props> = ({ movieState }) => {\n  if (!movieState) return <p>Error</p>\n  if (movieState.isLoading) return <p>Loading...</p>\n  if (!movieState.data) return <p>No Data</p>\n  return (\n    <div className=\"grid items-center justify-center gap-3 grid-cols-fit-card\">\n      {movieState.data.map((movie, index) =>\n        <Movie key={index} movie={movie} />\n      )}\n    </div>\n  )\n}\n\nexport default MovieList","import { Movie } from '../type/Movie'\n\nconst START_FETCH_MOVIE = \"START_FETCH_MOVIE\" as const\nconst SUCCESS_FETCH_MOVIE = \"SUCCESS_FETCH_MOVIE\" as const\nconst FAIL_FETCH_MOVIE = \"FAIL_FETCH_MOVIE\" as const\n\nconst startFetchMovieAction = () => {\n  return { type: START_FETCH_MOVIE }\n}\nconst successFetchMovieAction = (movies: Movie[]) => {\n  return { type: SUCCESS_FETCH_MOVIE, payload: movies }\n}\nconst failFetchMovieAction = () => {\n  return { type: FAIL_FETCH_MOVIE }\n}\n\nexport const actionCreators = {\n  startFetchMovieAction,\n  successFetchMovieAction,\n  failFetchMovieAction\n}\n\nexport type ActionType =\n  | ReturnType<typeof startFetchMovieAction>\n  | ReturnType<typeof successFetchMovieAction>\n  | ReturnType<typeof failFetchMovieAction>\n\nexport type State =\n  | undefined\n  | { isLoading: true; data: undefined } // loading\n  | { isLoading: false; data: Movie[] } //success\n  | { isLoading: false; data: undefined } // fail\n\nexport const initialState: State = undefined\n\nexport const reducer = (state: State, action: ActionType): State => {\n  switch (action.type) {\n    case START_FETCH_MOVIE:\n      return {\n        ...state,\n        isLoading: true,\n        data: undefined\n      }\n    case SUCCESS_FETCH_MOVIE:\n      return {\n        ...state,\n        isLoading: false,\n        data: action.payload\n      }\n    case FAIL_FETCH_MOVIE:\n      return {\n        ...state,\n        isLoading: false,\n        data: undefined\n      }\n    default:\n      return state\n  }\n}","import React, { createContext, Dispatch, ReactChild, useReducer } from 'react'\nimport { initialState, reducer, State, ActionType } from '../reducer/movie'\n\nexport const MovieContext = createContext<State>(undefined)\n\nexport const MovieUpdateContext = createContext<Dispatch<ActionType> | null>(null)\n\nexport const MovieContextProvider = ({ children }: { children: ReactChild }) => {\n  const [movieState, dispatch] = useReducer(reducer, initialState)\n\n  return (\n    <MovieContext.Provider value={movieState}>\n      <MovieUpdateContext.Provider value={dispatch}>\n        {children}\n      </MovieUpdateContext.Provider>\n    </MovieContext.Provider>\n  )\n\n}","import React from 'react'\nimport Search from './Search'\nimport MovieList from './MovieList'\nimport { useMovieFetch } from '../hooks/useMovieFetch'\nimport { useSearch } from '../hooks/useSearch'\n\nconst Main: React.FC = () => {\n  const [searchValue, handleSearchInputChange] = useSearch(\"man\")\n  const [movieState, refetch] = useMovieFetch(searchValue)\n  return (\n    <main className=\"max-w-6xl p-4 mx-auto my-8 text-center \">\n      <Search refetch={refetch} handleSearchInputChange={handleSearchInputChange} />\n      <MovieList movieState={movieState} />\n    </main>\n  )\n}\n\nexport default Main","import { useState, useCallback } from 'react'\n\nexport const useSearch = (query: string): [string, React.ChangeEventHandler<HTMLInputElement>] => {\n  const [searchValue, setSearchValue] = useState<string>(query)\n  const handleSearchInputChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchValue(event.target.value)\n  }, [setSearchValue])\n  return [searchValue, handleSearchInputChange]\n} ","import { useContext, useEffect, useState, useCallback } from 'react'\nimport { MovieUpdateContext, MovieContext } from '../context/movieContext'\nimport { actionCreators, State } from '../reducer/movie'\nimport { SearchResult } from '../type/Movie'\n\nexport const useMovieFetch = (searchValue: string): [State, () => void] => {\n  const movieState = useContext(MovieContext)\n  const dispatch = useContext(MovieUpdateContext)\n  const [refetchIndex, setRefetchIndex] = useState(0)\n\n  const refetch = useCallback(() => setRefetchIndex(prevRefetchIndex => prevRefetchIndex + 1), [setRefetchIndex])\n\n\n  useEffect(() => {\n    const fetchData = async () => {\n      if (!dispatch) return\n      dispatch(actionCreators.startFetchMovieAction())\n      fetch(`https://www.omdbapi.com/?s=${searchValue}&apikey=b0fee22e`)\n        .then(res => res.json())\n        .then((data: SearchResult) => {\n          if (!data.Search) return\n\n          dispatch(actionCreators.successFetchMovieAction(data.Search))\n        })\n        .catch(() => dispatch(actionCreators.failFetchMovieAction()))\n    }\n    fetchData()\n    // eslint-disable-next-line\n  }, [refetchIndex])\n  return [movieState, refetch]\n}","import React from 'react'\nimport Header from './components/Header'\nimport Main from './components/Main'\nconst App = () => {\n  return (\n    <div className=\"text-center bg-gray-600\">\n      <Header text=\"Movie Search\" />\n      <Main />\n    </div>\n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles/main.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport { MovieContextProvider } from './context/movieContext'\n\nReactDOM.render(\n  <React.StrictMode>\n    <MovieContextProvider>\n      <App />\n    </MovieContextProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}